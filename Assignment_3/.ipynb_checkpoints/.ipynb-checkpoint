{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Dynamic Programming Assignment\n",
    "## by Buelent Uendes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from IPython.display import Image"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part 1: Policy evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "#State space \n",
    "#Set the length of the que\n",
    "N = 100\n",
    "\n",
    "n = np.arange(0,N)\n",
    "q_low = 0.5\n",
    "q_high = 0.6\n",
    "\n",
    "#discount factor\n",
    "\n",
    "gamma = 0.9\n",
    "\n",
    "#Action space\n",
    "\n",
    "#For the following, high action is denoted by a = 1, low action by a = 0\n",
    "#a_high = 1\n",
    "#a_low = 0\n",
    "\n",
    "#Reward function\n",
    "\n",
    "def reward_function(x, a):\n",
    "    if a == 0:\n",
    "        return -(x/N)**2 \n",
    "    else:\n",
    "        return -(x/N)**2 - 0.01\n",
    "    \n",
    "#Transition function\n",
    "\n",
    "def transition_function(N, x, p, a):\n",
    "    #x is the current length of the que\n",
    "    #Generate increment with probability p\n",
    "    I = np.random.binomial(1,p)\n",
    "    #Generate increment which decreases the que\n",
    "    #If high action was taken\n",
    "    if a==1:\n",
    "        S = np.random.binomial(1,q_high)\n",
    "    else:\n",
    "        S =np.random.binomial(1,q_low)\n",
    "    return min(N-1, max(x+I-S,0)) \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Policy evaluation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<img src=\"iterative_policy_evaluation.png\" width=\"800\" height=\"800\"/>"
      ],
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Image(url= \"iterative_policy_evaluation.png\", width=800, height=800)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Alternatively, we can solve the Bellman equations directly, using the Bellman equations directly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "def r_policy(N, lazy = True):\n",
    "    output = []\n",
    "    if lazy == True:\n",
    "        for i in range(0,N):\n",
    "            output.append(reward_function(i,0))\n",
    "    else:\n",
    "        for i in range(0,N):\n",
    "            if i>= 50:\n",
    "                output.append(reward_function(i,1))\n",
    "            else:\n",
    "                output.append(reward_function(i,0))\n",
    "    return np.asarray(output)\n",
    "            \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def transition_matrix(N, p,q, lazy= True):\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def value_function(N, gamma):\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "return_lazy = r_policy(N)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "return_agg = r_policy(N, lazy = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.255"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "0.5*0.51"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Lazy policy\n",
    "## Always low service rate\n",
    "\n",
    "# Agressive policy\n",
    "\n",
    "#for x < 50 => low\n",
    "# for x>= 50 => high\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
